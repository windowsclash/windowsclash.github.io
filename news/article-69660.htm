<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://windowsclash.github.io/news/article-69660.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>vue组件之间传值的几种方式</title>
        <meta name="description" content="vue组件传值  父子组件之间传值。几种常见方式  第一种方式（父传子） 父组件 &lt;m-child :childMsg="parentMsg"&gt;&lt;/m-child&gt; //在父组" />
        <link rel="icon" href="/assets/website/img/windowsclash/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WindowsClash节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://windowsclash.github.io/news/article-69660.htm" />
    <meta property="og:site_name" content="WindowsClash节点订阅站" />
    <meta property="og:title" content="vue组件之间传值的几种方式" />
    <meta property="og:image" content="https://windowsclash.github.io/uploads/20240524/22413d3f1144b9f599c7c27f578584bf.webp" />
        <meta property="og:release_date" content="2025-03-08T05:06:17" />
    <meta property="og:updated_time" content="2025-03-08T05:06:17" />
        <meta property="og:description" content="vue组件传值  父子组件之间传值。几种常见方式  第一种方式（父传子） 父组件 &lt;m-child :childMsg="parentMsg"&gt;&lt;/m-child&gt; //在父组" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="vue组件之间传值的几种方式">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/windowsclash/bootstrap-5.0.0-beta2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/main.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-CSNVGWZ5YL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-CSNVGWZ5YL');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
    <!-- ========================= preloader start ========================= -->
    <div class="preloader">
        <div class="loader">
            <div class="spinner">
                <div class="spinner-container">
                    <div class="spinner-rotator">
                        <div class="spinner-left">
                            <div class="spinner-circle"></div>
                        </div>
                        <div class="spinner-right">
                            <div class="spinner-circle"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- preloader end -->
    <!-- ========================= header start ========================= -->
    <header class="header">
        <div class="navbar-area">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-12">
                        <nav class="navbar navbar-expand-lg">
                            <a class="navbar-brand" href="/">
                                                        <span>Windows Clash</span>
                                                        </a>
                            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                                <div class="ms-auto">
                                    <ul id="nav" class="navbar-nav ms-auto">
                                                                                <li class="nav-item">
                                            <a href="/">首页</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/free-nodes/">免费节点</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/paid-subscribe/">推荐机场</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/client.htm">客户端</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/news/">新闻资讯</a>
                                        </li>
                                                                            </ul>
                                </div>
                            </div>
                            <!-- navbar collapse -->
                        </nav>
                        <!-- navbar -->
                    </div>
                </div>
                <!-- row -->
            </div>
            <!-- container -->
        </div>
        <!-- navbar area -->
    </header>
    <!-- ========================= header end ========================= -->
    <!-- ========================= hero-section start ========================= -->
    <section id="home" class="hero-section category">
        <div class="container">
            <div class="row align-items-center" style="margin-top: -5rem;">
                <div class="col-xl-6 col-lg-6 col-md-10">
                    <div class="hero-content">
                        <h1>vue组件之间传值的几种方式</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
                <div class="col-xxl-6 col-xl-6 col-lg-6">
                    <div class="hero-image text-center text-lg-end">
                        <img src="/assets/website/img/windowsclash/hero/hero-image.svg" alt="">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- ========================= hero-section end ========================= -->
    <!-- ========================= feature-section-1 end ========================= -->
    <section id="feature-2" class="feature-section-2 pt-80">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night"> <h2> <a id="vue_0" rel="nofollow"></a>vue组件传值</h2> <h4> <a id="_1" rel="nofollow"></a>父子组件之间传值。几种常见方式</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221229/e50f3fa8da0f80989e9c8828fc36b74c.jpg" alt="vue组件之间传值的几种方式"></p> <p><strong>第一种方式（父传子）</strong></p> <p>父组件</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>m<span class="token operator">-</span>child <span class="token operator">:</span>childMsg<span class="token operator">=</span><span class="token string">"parentMsg"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>m<span class="token operator">-</span>child<span class="token operator">&gt;</span> <span class="token comment">//在父组件中的子组件&lt;m-child&gt;上面绑定一个msg,此时已经把父组件的值绑定在子组件上</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	<span class="token keyword">return</span><span class="token punctuation">{<!-- --></span> 		<span class="token comment">//父组件的数据</span> 		<span class="token literal-property property">parentMsg</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <blockquote> <p>注意：数据绑定的时候记得加 <mark>：</mark> 如果后面的数据是字符串则不用加 <mark>双引号</mark> 如果实在要加 <mark>：</mark> 的时候写法 :msg=“‘i am item’” ,因为 <mark>：msg</mark> 默认把后面的识别变量，所以后面记得在字符串里面单引号，直接msg默认是字符串，后面不用加</p> </blockquote> <p>子组件（mChild）<br /> 通过子组件props属性继承父组件的值，在通过渲染模板渲染出来{<!-- -->{msg}}</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>childMsg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span> <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span> 	<span class="token literal-property property">childMsg</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span> 		<span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>  <span class="token comment">//类型可以定义</span> 		<span class="token keyword">default</span><span class="token operator">:</span><span class="token string">''</span>  <span class="token comment">//默认是空值</span> 		<span class="token comment">// type:Object,  default () {return {}}</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><strong>第二种方法（子传父）</strong></p> <blockquote> <p>简单说明一下思路，虽然很绕但很好理解，多琢磨几次，<br /> 子传父通过事件方法来传值，首先在子组件定义一个方法，当方法执行的时候调用<code>this.$emit('自定义的方法名'，'要给父组件的值')</code>的方法来提交值，在通过父组件中的子组件通过v-on或者@来绑定刚才的方法，当这个方法执行的时候后面会触发另外一个方法，在这个方法中的第一个参数就是传过来的值，然后可以处理这个值</p> </blockquote> <p>父组件</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span> <span class="token comment">//将父组件中的子组件标签绑定事件,@子给父的事件=父组件中的事件</span> <span class="token operator">&lt;</span>m<span class="token operator">-</span>child @childFnGetParent<span class="token operator">=</span><span class="token string">"parentFn"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>m<span class="token operator">-</span>child<span class="token operator">&gt;</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	<span class="token keyword">return</span> <span class="token punctuation">{<!-- --></span> 		<span class="token literal-property property">mag</span><span class="token operator">:</span><span class="token string">''</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span> <span class="token comment">//自定义父组件的方法,val就是子给父的值,第一个参数</span> 	<span class="token function">parentFn</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	<span class="token comment">//让父组件中的数据等于子给父的,这样msg就是传过来的值</span> 		<span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">=</span>val 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>子组件（mChild）</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"childFn"</span><span class="token operator">&gt;</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span> 	<span class="token function">childFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	<span class="token comment">//自定意见$emit,传给父组件的事件名跟值</span> 		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"childFnGetParent"</span><span class="token punctuation">,</span><span class="token string">'要传入的值'</span><span class="token punctuation">)</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>父传子第二种方法（$children/ $parent）</p> <blockquote> <p>这种方法就不多解释了，挺容易理解的，实在不理解可以打印<mark>this.<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>          c</p> <p>          h</p> <p>          i</p> <p>          l</p> <p>          d</p> <p>          r</p> <p>          e</p> <p>          n</p> <p>          /</p> <p>          t</p> <p>          h</p> <p>          i</p> <p>          s</p> <p>          .</p> <p>         children/this.</p> <p>      </span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right: 0.01968em;">l</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right: 0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord">.</span></span></span></span></span>parent</mark> 就可以获取到信息</p> </blockquote> <pre><code class="prism language-javascript"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	<span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token operator">/</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent <span class="token comment">//获取子组件或者父组件的组件信息</span> <span class="token punctuation">}</span> </code></pre> <p>父传子的第三种方法（ref）<br /> 在父组件中的子组件m-child中添加一个ref=“事件名“</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">'togo'</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>m<span class="token operator">-</span>child ref<span class="token operator">=</span><span class="token string">"childFn"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>m<span class="token operator">-</span>child<span class="token operator">&gt;</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	<span class="token comment">//这种是可以通过方法来取得子组件的值</span> 	<span class="token function">toGo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token comment">//得到的就是childFn这个子组件,childFn相当于组件名,假如这个组件中有data数据</span> 		<span class="token comment">//则写法就是this.$refs.childFn.data,而子组件无非就是定义数据即可</span> 			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是接受参数的'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>childFn<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span>  	<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>childFn <span class="token punctuation">}</span> </code></pre> <blockquote> <p>这种方式跟第二种相似只不过他自己起了个事件名，方便查找</p> </blockquote> <h4> <a id="_98" rel="nofollow"></a>非父子组件传值</h4> <blockquote> <p>传值思想其实是一致的，先使用<code>$on</code>定义一个全局事件，后面写个回调函数，触发这个事件执行的方法，可以接参数<code>bus.$on('msg',val=&gt;{ })</code>，msg就是全局事件，然后在想要获取这个全局事件里面的值就调用他，不过这时候不是 <mark>this.<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>          e</p> <p>          m</p> <p>          i</p> <p>          t</p> <p>          而</p> <p>          是</p> <p>          b</p> <p>          u</p> <p>          s</p> <p>          .</p> <p>         emit 而是 bus.</p> <p>      </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.69444em; vertical-align: 0em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">而</span><span class="mord cjk_fallback">是</span><span class="mord mathdefault">b</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord">.</span></span></span></span></span>emit</mark></p> </blockquote> <ul> <li>事件总线<br /> 首先创建一个公共文件夹 <mark>util</mark><br /> 其次在创建一个js文件 例如<mark>bus.js</mark> </li> </ul> <p>bus.js下面的代码</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre> <p>这是两个组件传值,在互相传值各组件中引入bus.js文件<br /><code>import bus from "../bus.js"</code><br /> 在A组件中通过$emit调用自定义函数并且传参</p> <pre><code class="prism language-javascript"> 	<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>     <span class="token constant">A</span><span class="token literal-property property">组件</span><span class="token operator">:</span>     <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>elementValue<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"点击触发"</span> @click<span class="token operator">=</span><span class="token string">"elementByValue"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>   <span class="token comment">// 引入公共的bug，来做为中间传达的工具</span>   <span class="token keyword">import</span> Bus <span class="token keyword">from</span> <span class="token string">'./bus.js'</span>   <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       <span class="token keyword">return</span> <span class="token punctuation">{<!-- --></span>         <span class="token literal-property property">elementValue</span><span class="token operator">:</span> <span class="token number">4</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{<!-- --></span>       <span class="token function-variable function">elementByValue</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         Bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'val'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementValue<span class="token punctuation">)</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> </code></pre> <p>B组件 用$on事件来接收参数</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>     <span class="token constant">B</span><span class="token literal-property property">组件</span><span class="token operator">:</span>     <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"点击触发"</span> @click<span class="token operator">=</span><span class="token string">"getData"</span><span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>   <span class="token keyword">import</span> Bus <span class="token keyword">from</span> <span class="token string">'./bus.js'</span>   <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       <span class="token keyword">return</span> <span class="token punctuation">{<!-- --></span>         <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">0</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>       <span class="token comment">// 用$on事件来接收参数</span>       Bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'val'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>         vm<span class="token punctuation">.</span>name <span class="token operator">=</span> data       <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{<!-- --></span>       <span class="token function-variable function">getData</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">++</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  </code></pre> <p>只是全局组件传值,单个组件调用</p> <blockquote> <p>然后在所有需要用到这个文件下面的数据只需要导入这个文件就行</p> </blockquote> <p>在<code>APP.vue</code>下面定义一个方法</p> <pre><code class="prism language-javascript"><span class="token comment">//全局中定义的方法名</span> <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span> 	<span class="token function">passMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	<span class="token comment">//注意这里的写法 </span> 		bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token string">'要传入的数数据'</span><span class="token punctuation">)</span><span class="token comment">//自定义事件都用emit</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">//子组件利用勾子函数监听事件</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span> 		 	<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <pre><code class="prism language-javascript">注意的是 在页面销毁的时候需要吧bus销毁掉  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">"child2"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>destroyedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> </code></pre> <ul> <li>$ attrs / listeners<br /> 解决多级组件间传值的问题</li> </ul> <h4> <a id="attrs_205" rel="nofollow"></a>attrs</h4> <p>在<code>App.vue</code>下面定义数据并且把想要的数据全部绑定到相应的子组件上面<br /> 然后在在其父组件上面绑定一个v-bind=‘$attrs’ 注意这里不能简写，如果本身有的数据跟vue的数据名相同时，他会自动过滤</p> <h4> <a id="listeners_209" rel="nofollow"></a>listeners</h4> <p>是通过监听事件来实现的</p> <h4> <a id="provide__inject__212" rel="nofollow"></a>provide 和 inject 传值</h4> <p>用于祖先与后代传值<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/dan_seek/article/details/102641761"  rel="nofollow">这篇文章也不错后面的几种传值方式这里面有详解</a></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-69019.htm">上海宠物救助站电话号码是多少（上海宠物救助领养中心地址）</a></p>
                                        <p>下一个：<a href="/news/article-69661.htm">动物诊疗许可证申请表填写样板（动物诊疗许可证的申办程序）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-24-clash-windows.htm" title="1月24日|最高速度19.9M/S，2025最新Clash/SSR/Shadowrocket/V2ray免费高速订阅链接，手机翻墙机场推荐">1月24日|最高速度19.9M/S，2025最新Clash/SSR/Shadowrocket/V2ray免费高速订阅链接，手机翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-12-free-high-speed-nodes.htm" title="2月12日|最高速度20M/S，2025最新Shadowrocket/SSR/Clash/V2ray免费高速订阅链接，手机翻墙机场推荐">2月12日|最高速度20M/S，2025最新Shadowrocket/SSR/Clash/V2ray免费高速订阅链接，手机翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-25-free-node-subscribe.htm" title="1月25日|最高速度20.2M/S，2025最新V2ray/SSR/Clash/Shadowrocket免费高速订阅链接，手机翻墙机场推荐">1月25日|最高速度20.2M/S，2025最新V2ray/SSR/Clash/Shadowrocket免费高速订阅链接，手机翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-41019.htm" title="动物疫苗接种时间表图片高清 动物疫苗接种时间表图片高清版">动物疫苗接种时间表图片高清 动物疫苗接种时间表图片高清版</a></li>
                        <li class="py-2"><a href="/news/article-60988.htm" title="动物医院部门职责范围（动物医院职位）">动物医院部门职责范围（动物医院职位）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-5-free-high-speed-nodes.htm" title="3月5日|最高速度18.6M/S，2025最新Clash/Shadowrocket/SSR/V2ray免费高速订阅链接，手机翻墙机场推荐">3月5日|最高速度18.6M/S，2025最新Clash/Shadowrocket/SSR/V2ray免费高速订阅链接，手机翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-42511.htm" title="怀孕期间被猫咪轻微抓伤怎么办（怀孕期被猫抓了怎么办）">怀孕期间被猫咪轻微抓伤怎么办（怀孕期被猫抓了怎么办）</a></li>
                        <li class="py-2"><a href="/news/article-49982.htm" title="宠物狗狗粮加盟价格（宠物粮食加盟）">宠物狗狗粮加盟价格（宠物粮食加盟）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-28-free-v2ray.htm" title="1月28日|最高速度22.9M/S，2025最新Clash/Shadowrocket/SSR/V2ray免费高速订阅链接，手机翻墙机场推荐">1月28日|最高速度22.9M/S，2025最新Clash/Shadowrocket/SSR/V2ray免费高速订阅链接，手机翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-53128.htm" title="动物疫苗的使用方法及注意事项视频教程大全 动物疫苗的使用方法及注意事项视频教程大全图片">动物疫苗的使用方法及注意事项视频教程大全 动物疫苗的使用方法及注意事项视频教程大全图片</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </section>
        <!-- ========================= footer start ========================= -->
    <footer class="footer pt-160">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>WindowsClash节点订阅站 版权所有</p>
                <p>Powered by WordPress</p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer end ========================= -->
    <!-- ========================= scroll-top ========================= -->
    <a href="#" class="scroll-top btn-hover">
        <i class="lni lni-chevron-up"></i>
    </a>
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/windowsclash/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/bootstrap-5.0.0-beta2.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/wow.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/polyfill.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>