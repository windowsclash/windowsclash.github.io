<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://windowsclash.github.io/news/article-58463.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>C++学习笔记15-类和对象-C++对象模型和this指针</title>
        <meta name="description" content="类和对象-C++对象模型和this指针  15.1 成员变量和成员函数分开存储 15.2 this指针概念 15.3 空指针访问成员函数 15.4 const修饰成员函数    在C++中：  类内的" />
        <link rel="icon" href="/assets/website/img/windowsclash/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WindowsClash节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://windowsclash.github.io/news/article-58463.htm" />
    <meta property="og:site_name" content="WindowsClash节点订阅站" />
    <meta property="og:title" content="C++学习笔记15-类和对象-C++对象模型和this指针" />
    <meta property="og:image" content="https://windowsclash.github.io/uploads/20240524/7eb4a945149eba48fbcdfc4938366550.webp" />
        <meta property="og:release_date" content="2025-02-18T00:36:43" />
    <meta property="og:updated_time" content="2025-02-18T00:36:43" />
        <meta property="og:description" content="类和对象-C++对象模型和this指针  15.1 成员变量和成员函数分开存储 15.2 this指针概念 15.3 空指针访问成员函数 15.4 const修饰成员函数    在C++中：  类内的" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="C++学习笔记15-类和对象-C++对象模型和this指针">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/windowsclash/bootstrap-5.0.0-beta2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/main.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-CSNVGWZ5YL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-CSNVGWZ5YL');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
    <!-- ========================= preloader start ========================= -->
    <div class="preloader">
        <div class="loader">
            <div class="spinner">
                <div class="spinner-container">
                    <div class="spinner-rotator">
                        <div class="spinner-left">
                            <div class="spinner-circle"></div>
                        </div>
                        <div class="spinner-right">
                            <div class="spinner-circle"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- preloader end -->
    <!-- ========================= header start ========================= -->
    <header class="header">
        <div class="navbar-area">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-12">
                        <nav class="navbar navbar-expand-lg">
                            <a class="navbar-brand" href="/">
                                                        <span>Windows Clash</span>
                                                        </a>
                            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                                <div class="ms-auto">
                                    <ul id="nav" class="navbar-nav ms-auto">
                                                                                <li class="nav-item">
                                            <a href="/">首页</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/free-nodes/">免费节点</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/paid-subscribe/">推荐机场</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/client.htm">客户端</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/news/">新闻资讯</a>
                                        </li>
                                                                            </ul>
                                </div>
                            </div>
                            <!-- navbar collapse -->
                        </nav>
                        <!-- navbar -->
                    </div>
                </div>
                <!-- row -->
            </div>
            <!-- container -->
        </div>
        <!-- navbar area -->
    </header>
    <!-- ========================= header end ========================= -->
    <!-- ========================= hero-section start ========================= -->
    <section id="home" class="hero-section category">
        <div class="container">
            <div class="row align-items-center" style="margin-top: -5rem;">
                <div class="col-xl-6 col-lg-6 col-md-10">
                    <div class="hero-content">
                        <h1>C++学习笔记15-类和对象-C++对象模型和this指针</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
                <div class="col-xxl-6 col-xl-6 col-lg-6">
                    <div class="hero-image text-center text-lg-end">
                        <img src="/assets/website/img/windowsclash/hero/hero-image.svg" alt="">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- ========================= hero-section end ========================= -->
    <!-- ========================= feature-section-1 end ========================= -->
    <section id="feature-2" class="feature-section-2 pt-80">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>类和对象-C++对象模型和this指针</h3> <ul> <li><a href="#151__2" rel="nofollow">15.1 成员变量和成员函数分开存储</a></li> <li><a href="#152_this_64" rel="nofollow">15.2 this指针概念</a></li> <li><a href="#153__157" rel="nofollow">15.3 空指针访问成员函数</a></li> <li><a href="#154_const_203" rel="nofollow">15.4 const修饰成员函数</a></li> </ul> </div> </h1> <p>在C++中：</p> <ul> <li>类内的成员变量和成员函数分开存储。</li> <li>只有非静态成员变量才属于类的对象上。</li> <li>类对象的存储方式为字节对齐，总大小为类中最宽基本类型成员大小×非静态成员变量数量。</li> </ul> <p>示例：</p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token comment">//成员变量和成员函数的分开</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Person_2</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">int</span> m_A<span class="token punctuation">;</span>			   <span class="token comment">//非静态成员变量属于类的对象上</span> 	<span class="token keyword">static</span> string m_Name<span class="token punctuation">;</span>  <span class="token comment">//静态成员变量不属于类的对象上</span> 	<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>		   <span class="token comment">//非静态函数函数不属于类的对象上</span> 	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> <span class="token comment">//静态函数函数不属于类的对象上</span> <span class="token comment">//只有非静态成员变量属于类的对象上	</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Person_3</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">int</span> m_A<span class="token punctuation">;</span> 	<span class="token keyword">double</span> m_B<span class="token punctuation">;</span> 	<span class="token keyword">char</span> m_C<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> string m_Name <span class="token operator">=</span> <span class="token string">"zzz"</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">test1_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person p<span class="token punctuation">;</span> 	<span class="token comment">//空对象占用内存空间为:1 </span> 	<span class="token comment">//因为编译器会为每个空对象分配一个字节空间,仅仅用来区分不同空对象,使得不同空对象都有一个独一无二的内存位置。</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">test1_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person_2 p<span class="token punctuation">;</span> 	<span class="token comment">//非静态成员变量属于类的对象上,这里有有一个int，所以是4</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">test1_03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person_3 p<span class="token punctuation">;</span> 	<span class="token comment">//字节对齐，和最大的对齐，double为8，所以为3*8</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token function">test1_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token function">test1_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token function">test1_03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p></p> </h1> <p>我们知道在C++中成员变量和成员函数是分开存储的，</p> <p>每一个非静态成员函数只会诞生一份函数实例， 也就是说多个同类型的对象（一个实例化的多个对象）会共用一块函数代码。</p> <p>那么问题是：<strong>这一块代码是如何区分那个对象调用自己的呢?</strong></p> <p>C++通过提供特殊的对象指针，this指针，解决上述问题——<strong>this指针指向被调用的成员函数所属的对象</strong>。</p> <p>this指针是隐含每一个非静态成员函数内的一种指针，</p> <p>this指针不需要定义，直接使用即可。</p> <p>this指针的用途：</p> <ul> <li>当形参和成员变星同名时,可用this指针来区分</li> <li>在类的非静态成员函数中返回对象本身，可使用 <code>return *this</code> （*this就是解引用，将这个指针解引用，就得到对象本身）。注意要指明返回数据类型为这个类的引用的数据类型。</li> </ul> <p>示例：</p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token function">Person2</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		age <span class="token operator">=</span> age<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Person2_02</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token function">Person2_02</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">void</span> <span class="token function">PersonAddAge</span><span class="token punctuation">(</span>Person2_02<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>age <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	Person2_02 <span class="token function">PersonAddAge2</span><span class="token punctuation">(</span>Person2_02<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>   <span class="token comment">//因为返回类型是一个对象类型，如果直接用这个类的类型接收，会开辟新的内存来接收返回值</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>age <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//可以看到(*this)的数据类型是class Person2_02</span> 		<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	Person2_02<span class="token operator">&amp;</span> <span class="token function">PersonAddAge3</span><span class="token punctuation">(</span>Person2_02<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>   <span class="token comment">//因为返回类型是一个对象类型，用引用接收，可以将本体返回。</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>age <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span> 	 		<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">test2_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person2 <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p的年龄为："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	Person2_02 <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1的年龄为："</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	Person2_02 <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	p2<span class="token punctuation">.</span><span class="token function">PersonAddAge</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"改变后p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  	<span class="token comment">//如果我想多次调用p2的函数，那么需要每次将对象返回。</span> 	<span class="token comment">//链式编程思想</span> 	p2<span class="token punctuation">.</span><span class="token function">PersonAddAge2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddAge2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddAge2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">//理论上应该是15+5+5+5 = 30，但是结果是15+5=20</span> 	<span class="token comment">//因为每次都是另开辟内存来接收返回的对象，导致不能在原对象上做运算。 </span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"再后来改变后p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  	p2<span class="token punctuation">.</span><span class="token function">PersonAddAge3</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddAge3</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddAge3</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20+5+5+5</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最后改变后p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token function">test2_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p></p> </h1> <p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针 。</p> <p>如果用到this指针，需要加以判断保证代码的健壮性。</p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Person3</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token keyword">void</span> <span class="token function">showClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is Person3 class"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">void</span> <span class="token function">showPerson3Age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 		<span class="token punctuation">{<!-- --></span> 			<span class="token keyword">return</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token comment">//报错原因是因为传入的指针为NULL，  </span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"age = "</span> <span class="token operator">&lt;&lt;</span> m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//调用m_Age时，其实是这个代码：this-&gt;m_Age,现在this为空，所以报错。</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">int</span> m_Age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">test3_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person3<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 	p<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">showClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	p<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">showPerson3Age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token function">test3_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p></p> </h1> <p><strong>常函数</strong>:</p> <ul> <li>成员函数后加const后我们称为这个函数为常函数。</li> <li>常函数内<strong>不可以修改成员属性</strong>。</li> <li>成员属性声明时加关键字<code>mutable</code>后，在常函数中依然可以修改。</li> </ul> <p>语法：</p> <pre><code class="prism language-cpp"><span class="token comment">//常函数</span> 返回值类型 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>  <span class="token comment">//mutable</span> <span class="token keyword">mutable</span> 数据类型 变量名<span class="token punctuation">;</span> </code></pre> <p><strong>常对象</strong>:</p> <ul> <li>常对象的所有成员变量都不可修改。</li> <li>成员属性声明时加关键字<code>mutable</code>后，依然可以修改。</li> <li>声明对象前加<code>const</code>称该对象为常对象。</li> <li>常对象<strong>只能调用常函数</strong>。</li> </ul> <pre><code class="prism language-cpp"><span class="token comment">//常对象</span> <span class="token keyword">const</span> 对象名 对象<span class="token punctuation">;</span> </code></pre> <p><strong>示例</strong>：</p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Person4</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token comment">//this指针本质就是一个指针常量(指针的指向不可更改)  类似于Person* const this;</span> 	<span class="token comment">//加上const后，就相当于const Person *const this,即指针指向的值也不可修改。</span> 	<span class="token keyword">void</span> <span class="token function">showPerson4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> 	<span class="token punctuation">{<!-- --></span>  		<span class="token comment">//this = NULL; this指针是不可修改的，</span> 		<span class="token comment">//this-&gt;m_A = 100;</span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>m_B <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">int</span> m_A<span class="token punctuation">;</span> 	<span class="token keyword">mutable</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span>  <span class="token comment">//变量加上关键字mutable后，就仍旧是可以更改的。</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">test4_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person4 p<span class="token punctuation">;</span> 	p<span class="token punctuation">.</span><span class="token function">showPerson4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">test4_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">const</span> Person4 p<span class="token punctuation">;</span>  <span class="token comment">//变为常对象</span> 	<span class="token comment">//p.m_A = 100;</span> 	p<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>      <span class="token comment">//m_B加了mutable，在常对象下也是可以修改的。</span> 	 	<span class="token comment">//常对象只能调用常函数</span> 	p<span class="token punctuation">.</span><span class="token function">showPerson4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">//p.func();//非常函数不可调用</span> 	<span class="token comment">//因为非常函数内可以修改成员变量，但是常对象已经被规定它的成员变量是不可修改的，所以会报错。</span> <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token function">test4_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-58109.htm">被家猫抓伤一点点血痕要***吗（被家猫抓伤不***会怎样）</a></p>
                                        <p>下一个：<a href="/news/article-58464.htm">青浦二中2020中考最低录取分数线（上海2020年青浦二中升学率）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-43503.htm" title="python数据分析与挖掘实战————银行分控模型（几种算法模型的比较）">python数据分析与挖掘实战————银行分控模型（几种算法模型的比较）</a></li>
                        <li class="py-2"><a href="/news/article-33714.htm" title="动物疫苗常温多长时间失效啊能打 动物疫苗常温多长时间失效啊能打吗">动物疫苗常温多长时间失效啊能打 动物疫苗常温多长时间失效啊能打吗</a></li>
                        <li class="py-2"><a href="/news/article-35447.htm" title="动物诊疗许可证办理（动物诊疗许可证办理多少钱）">动物诊疗许可证办理（动物诊疗许可证办理多少钱）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-12-free-high-speed-nodes.htm" title="2月12日|最高速度20M/S，2025最新Shadowrocket/SSR/Clash/V2ray免费高速订阅链接，手机翻墙机场推荐">2月12日|最高速度20M/S，2025最新Shadowrocket/SSR/Clash/V2ray免费高速订阅链接，手机翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-24-free-node-subscribe.htm" title="11月24日|最高速度21M/S，2024最新SSR/Shadowrocket/Clash/V2ray免费节点高速订阅链接，翻墙机场推荐">11月24日|最高速度21M/S，2024最新SSR/Shadowrocket/Clash/V2ray免费节点高速订阅链接，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-16-free-subscribe-node.htm" title="11月16日|最高速度19.1M/S，2024最新Shadowrocket/SSR/Clash/V2ray免费节点高速订阅链接，翻墙机场推荐">11月16日|最高速度19.1M/S，2024最新Shadowrocket/SSR/Clash/V2ray免费节点高速订阅链接，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-22932.htm" title="思念餐厅官方网站（思念食品售后服务电话）">思念餐厅官方网站（思念食品售后服务电话）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-2-free-ssr-node.htm" title="2月2日|最高速度21.6M/S，2025最新Clash/SSR/Shadowrocket/V2ray免费高速订阅链接，手机翻墙机场推荐">2月2日|最高速度21.6M/S，2025最新Clash/SSR/Shadowrocket/V2ray免费高速订阅链接，手机翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-7-clash-v2ray-ss-ssr.htm" title="12月7日|最高速度19.9M/S，2024最新V2ray/SSR/Shadowrocket/Clash免费节点高速订阅链接，翻墙机场推荐">12月7日|最高速度19.9M/S，2024最新V2ray/SSR/Shadowrocket/Clash免费节点高速订阅链接，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-4-free-node-subscribe-links.htm" title="2月4日|最高速度22M/S，2025最新SSR/Clash/V2ray/Shadowrocket免费高速订阅链接，手机翻墙机场推荐">2月4日|最高速度22M/S，2025最新SSR/Clash/V2ray/Shadowrocket免费高速订阅链接，手机翻墙机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </section>
        <!-- ========================= footer start ========================= -->
    <footer class="footer pt-160">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>WindowsClash节点订阅站 版权所有</p>
                <p>Powered by WordPress</p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer end ========================= -->
    <!-- ========================= scroll-top ========================= -->
    <a href="#" class="scroll-top btn-hover">
        <i class="lni lni-chevron-up"></i>
    </a>
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/windowsclash/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/bootstrap-5.0.0-beta2.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/wow.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/polyfill.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>