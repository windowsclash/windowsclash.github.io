<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://windowsclash.github.io/news/article-39541.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>如何使用 Redis 缓存</title>
        <meta name="description" content="如何使用 Redis 缓存  前言 对于 Redis 来讲，作为缓存使用，是我们在业务中经常使用的，这里总结下，Redis 作为缓存在业务中的使用。 旁路缓存 Cache Aside（旁路缓存）策略以" />
        <link rel="icon" href="/assets/website/img/windowsclash/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/windowsclash/bootstrap-5.0.0-beta2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/windowsclash/main.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-CSNVGWZ5YL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-CSNVGWZ5YL');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
    <!-- ========================= preloader start ========================= -->
    <div class="preloader">
        <div class="loader">
            <div class="spinner">
                <div class="spinner-container">
                    <div class="spinner-rotator">
                        <div class="spinner-left">
                            <div class="spinner-circle"></div>
                        </div>
                        <div class="spinner-right">
                            <div class="spinner-circle"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- preloader end -->
    <!-- ========================= header start ========================= -->
    <header class="header">
        <div class="navbar-area">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-12">
                        <nav class="navbar navbar-expand-lg">
                                                        <a class="navbar-brand" href="/">
                                Windows Clash
                            </a>
                                                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                                <span class="toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                                <div class="ms-auto">
                                    <ul id="nav" class="navbar-nav ms-auto">
                                                                                <li class="nav-item">
                                            <a href="/">首页</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/free-nodes/">免费节点</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/paid-subscribe/">推荐机场</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="/news/">新闻资讯</a>
                                        </li>
                                                                                <li class="nav-item">
                                            <a href="#">关于</a>
                                        </li>
                                        <li class="nav-item">
                                            <a href="#">联系</a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <!-- navbar collapse -->
                        </nav>
                        <!-- navbar -->
                    </div>
                </div>
                <!-- row -->
            </div>
            <!-- container -->
        </div>
        <!-- navbar area -->
    </header>
    <!-- ========================= header end ========================= -->
    <!-- ========================= hero-section start ========================= -->
    <section id="home" class="hero-section category">
        <div class="container">
            <div class="row align-items-center" style="margin-top: -5rem;">
                <div class="col-xl-6 col-lg-6 col-md-10">
                    <div class="hero-content">
                        <h1>如何使用 Redis 缓存</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
                <div class="col-xxl-6 col-xl-6 col-lg-6">
                    <div class="hero-image text-center text-lg-end">
                        <img href="/assets/website/img/windowsclash/hero/hero-image.svg" alt="">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- ========================= hero-section end ========================= -->
    <!-- ========================= feature-section-1 end ========================= -->
    <section id="feature-2" class="feature-section-2 pt-80">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<ul> <li><span style="font-size: 1.5em;">如何使用 Redis 缓存</span></li> </ul> <h3 id="前言">前言</h3> <p>对于 Redis 来讲，作为缓存使用，是我们在业务中经常使用的，这里总结下，Redis 作为缓存在业务中的使用。</p> <h3 id="旁路缓存">旁路缓存</h3> <p>Cache Aside（旁路缓存）策略以数据库中的数据为准，缓存中的数据是按需加载的。它可以分为读策略和写策略。</p> <h4 id="只读缓存">只读缓存</h4> <p>只读缓存 从缓存中读取数据；如果缓存命中，则直接返回数据；如果缓存不命中，则从数据库中查询数据；查询到数据后，将数据写入到缓存中，并且返回给用户。</p> <p>如果需要对数据进行修改的时候，直接修改数据库中的数据，然后删除缓存中的旧数据。</p> <p>只读缓存的优点：</p> <p>所有最新的数据都在数据库中，数据不存在丢失的风险。</p> <p>缺点：</p> <p>每次修改数据，都会删除缓冲，之后的请求会发生一次缓存缺失。</p> <h4 id="读写缓存">读写缓存</h4> <p>除了进行读操作外，数据的修改操作也会发送到缓存中，直接在缓存中对数据进行修改。此时，得益于Redis的高性能访问特性，数据的增删改操作可以在缓存中快速完成，处理结果也会快速返回给业务应用，这就可以提升业务应用的响应速度。</p> <p>当然 Redis 是内存数据库，一旦掉电或宕机，内存中的数据就有可能存在丢失。</p> <p>针对这种情况，一般会有两种回写策略：</p> <ul> <li>1、同步回写；</li> </ul> <p>写请求发给缓存的同时，也会发给后端数据库进行处理，等到缓存和数据库都写完数据，才给客户端返回。这样，即使缓存宕机或发生故障，最新的数据仍然保存在数据库中，这就提供了数据可靠性保证。</p> <p>不过，同步直写会降低缓存的访问性能。这是因为缓存中处理写请求的速度是很快的，而数据库处理写请求的速度较慢。即使缓存很快地处理了写请求，也需要等待数据库处理完所有的写请求，才能给应用返回结果，这就增加了缓存的响应延迟。</p> <ul> <li>2、异步回写。</li> </ul> <p>所有写请求都先在缓存中处理。可以定时将缓存写入到内存中，然后等到这些增改的数据要被从缓存中淘汰出来时，再次将它们写回后端数据库。这样一来，处理这些数据的操作是在缓存中进行的，很快就能完成。只不过，如果发生了掉电，而它们还没有被写回数据库，就会有丢失的风险了。</p> <p>优点：</p> <p>被修改的数据永远在缓存中，不会发生缓存缺失，下次可以直接访问，不在需要向数据库中进行一次查询。</p> <p>缺点：</p> <p>数据可能存在丢失的风险。</p> <h3 id="设置多大的缓存合适">设置多大的缓存合适</h3> <p>缓存能够提高响应速度，但是缓存的数量也不是越多越好？</p> <p>1、大容量缓存是能带来性能加速的收益，但是成本也会更高；</p> <p>2、在一些场景中，比如秒杀，少量的缓存承担的就是绝大部分的流量访问。</p> <p>系统的设计选择是一个权衡的过程：大容量缓存是能带来性能加速的收益，但是成本也会更高，而小容量缓存不一定就起不到加速访问的效果。一般来说，建议把缓存容量设置为总数据量的15%到30%，兼顾访问性能和内存空间开销。</p> <h3 id="内存被写满了如何处理">内存被写满了如何处理</h3> <p>Redis 中的内存被写满了，就会触发内存淘汰机制了</p> <p>具体参加<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://boilingfrog.github.io/2022/04/02/Redis%E4%B8%AD%E8%BF%87%E6%9C%9F%E9%94%AE%E7%9A%84%E5%88%A0%E9%99%A4/#%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6"  target="_blank" rel="nofollow">内存淘汰机制</a></p> <h3 id="缓存经常遇到的问题">缓存经常遇到的问题</h3> <p>Redis 作为缓存，经常遇到的几种情况：缓存中的数据和数据库中的不一致；缓存雪崩；缓存击穿和缓存穿透。</p> <p>下面一一来探讨下</p> <h3 id="1缓存中的数据和数据库中的不一致">1、缓存中的数据和数据库中的不一致</h3> <p>数据一致性，通俗的理解就是，数据库中的数据和缓冲中的数据完全一致就满足一致性。不过对于只读缓存，如果缓冲中没有就去数据库中查询，这样如果缓存中没有数据，但是数据库中的数据是最新的，最终也能满足数据一致性。</p> <p>所以总结下，一致性大致分成下面的两种情况：</p> <p>1、缓存中有数据，缓存中的数据和数据库中的数据一样；</p> <p>2、缓存中没有数据，数据库中记录了最新的数据。</p> <p>下面分析下只读缓存和读写缓存中的数据不一致情况</p> <h4 id="读写缓存-1">读写缓存</h4> <p>读写缓存有同步写回和异步写回两种策略</p> <p>同步写回：缓存在新增修改的时候，也会同步数据到数据库中，这样总能保持缓存中的数据和数据库中的一致；</p> <p>异步写回：缓存新增修改时候，先不写回到数据库中，定时或者缓存中数据淘汰的时候，再写回到数据库中。这种，如果 Redis 故障宕机了，没有及时写回数据到数据库中，就会造成数据的不一致。</p> <p>对于读写缓存，使用同步写回的策略，能保证数据数据的一致性。不过，需要在业务应用中使用事务机制，来保证缓存和数据库的更新具有原子性，也就是说，两者要不一起更新，要不都不更新，返回错误信息，进行重试。否则，我们就无法实现同步直写。</p> <p>如果系统没宕机，redis 系统正常的情况下，因为读写缓存，缓存中的数据是一直存在的，所以当修改数据的时候先修改缓存中的数据，这样就算并发很大的情况下，因为缓存中的数据都是最新的，并且一直存在，这样数据总能读取到最新的数据。</p> <h4 id="只读缓存-1">只读缓存</h4> <p>只读缓存，如果数据新增，直接写入到数据库中，如果有数据修改删除，也是直接操作数据库不过缓存中的数据不会更新，而是直接删除缓存中的数据。</p> <p>这样数据的更新操作之后，数据库中的数据总是最新的，缓存中就会发生缓存缺失，此时就会从数据库中读取数据，然后再加载到缓存中，这样缓存中的数据总能和数据库中的数据一致。</p> <p>只读缓存在数据新增的时候，缓存中是没有数据的，所以肯定是要从数据库中加载，这种情况不存在数据不一致的情况。</p> <p>在只读缓存中，数据不一致的情况,发生在数据的更新删除操作中，下面来一一分析下</p> <p>删改操作既要修改数据库，同时还要删除对应的缓存，如果这两个操作的原子性无法得到保证，(一起操作成功，或者一起操作失败)，那么数据的一致性就得不到保证了。</p> <h5 id="来个异常的栗子">来个异常的栗子</h5> <p>1、先修改数据库，然后删除缓存，但是删除缓存失败了；</p> <p>删除缓存失败了，那么缓存中存在的就是旧值，这时候用户的请求过来了，首先去缓存中查询，这时候拿到的就是老旧的数据。</p> <p>2、先删除缓存，在修改数据库，修改数据库失败了；</p> <p>缓存删除成功，数据库修改失败了，那么数据库中存在的就是旧值，因为缓存已经被删除了，这时候去缓存中查询，发生了缓存的缺失，数据就会从数据库中加载到缓存中，这时候读取到也是老旧的数据。</p> <p><strong>针对这种问题如何解决呢？</strong></p> <p>上面出现异常的两种场景，归根到底，就是两者操作的原子性没有得到保证，所以可以借助于消息队列实现最终的一致性。</p> <p>使用 mq 解决分布式事务可参见<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/ricklz/p/15747565.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1"  target="_blank" rel="nofollow">分布式事务</a></p> <p>这里的操作场景相对简单一点，只要借助于 mq 的重试机制，保证第二步的操成功就可以了。</p> <p>栗如：</p> <p>1、先修改数据库；</p> <p>2、发送删除缓存的消息到 mq 中；</p> <p>3、下游收到删除的消息，操作删除缓存，如果失败，借助于 mq 的重试机制，就能进行重试操作，直到成功。当然如果，重试多次还是失败，我们需要记录错误原因，然后通知业务方。</p> <p><img decoding="async" src="https://img2022.cnblogs.com/blog/1237626/202204/1237626-20220420094833380-8662315.png" alt="如何使用 Redis 缓存"></p> <p>那到底应该先删除缓存还是先修改数据库呢？这里我们再探讨一下</p> <h5 id="1先删除缓存后修改数据库">1、先删除缓存后修改数据库</h5> <p>先删除缓存，然后修改数据库</p> <p>如果数据库的更新有延迟，那么这时候一个线程过来查询该数据，因为缓存中已经删除了，这时候发生了缓存的缺失，然后就回去数据库中查询，数据库可能还没有更新成功，就可能获取到旧值。</p> <p>如何解决呢</p> <p>使用 延迟双删 策略</p> <p>当数据库被修改之后，线程 sleep 一段时间，然后再次删除缓存，然缓存发生一次缺失，这样下次的请求，就能把数据库中最新的数据加载到缓存中。</p> <p><img decoding="async" src="https://img2022.cnblogs.com/blog/1237626/202204/1237626-20220420094813254-301272682.png" alt="如何使用 Redis 缓存"></p> <p>比如上面的这种情况，因为数据库的更新可能存在延迟，所以时候线程2读取到了数据库的旧值，然后加载到了缓存中，这样接下来的所有的查询就都会读取旧值</p> <p>所以 线程1，通过延迟双删来处理这种情况</p> <p>线程1，在 sleep 一段时间之后，删除缓存，这样就能使后续的缓存缺失，后续的查询就能加载数据库中最新的数据到缓存中。</p> <p>不过 sleep 的时间需要大于，线程2，读数据并且写入数据到内存的时间，如果 sleep 时间过小，这时候线程2，的旧值还没有写入到缓存中，线程1，已经再次删除了缓存，然后这时候线程2把旧值写入，导致缓存中依然是旧数据。</p> <pre><code>redis.delKey(X) db.update(X) Thread.sleep(N) redis.delKey(X)</code></pre> <p>当然，这在 sleep 的时间内，还是有一部分请求会读取到旧值</p> <h5 id="2先修改数据库然后删除缓存">2、先修改数据库然后删除缓存</h5> <p>先修改数据库，然后删除缓存</p> <p>如果缓存删除有延迟，那么这时候过来的请求，就会读取到缓存中老旧的数据，不过缓存会马上被删除，只会有少部分的数据读取到老旧的数据，对业务影响比较小。</p> <p>经过对比，发现先修改数据库然后在删除缓存，对我们业务的影响比较小，同时也跟容易处理。</p> <h4 id="只读缓存和读写缓存如何选择">只读缓存和读写缓存如何选择</h4> <p>读写缓存对比只读缓存</p> <p>优点：缓存中一直会有数据，如果更新操作后会立即再次访问，可以直接命中缓存，能够降低读请求对于数据库的压力。</p> <p>缺点：如果更新后的数据，之后很少再被访问到，会导致缓存中保留的不是最热的数据，缓存利用率不高（只读缓存中保留的都是热数据）。</p> <p>所以读写缓存比较适合用于读写相当的业务场景。</p> <h3 id="2缓存雪崩">2、缓存雪崩</h3> <h4 id="什么是缓存雪崩">什么是缓存雪崩</h4> <p>缓存雪崩是指大量的应用请求无法在Redis缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。</p> <p>缓存雪崩有两种场景</p> <h4 id="1大量缓存同时过期">1、大量缓存同时过期</h4> <p>如果有大量的缓存 key 设置了同样的过期时间，如果这些缓存 key 过期了，同时有大量的请求，进来了，这些请求就会直接打到数据库中，数据库可能因为这些请求，导致数据库压力增大，严重的时候数据库宕机。</p> <p>如何解决呢？</p> <p>1、避免给大量的过期键设置相同的过期时间，设计过期时间的时候，可以考虑加入一个业务上允许的过期随机值；</p> <p>2、服务降级，只有部分核心业务的请求，才会流转到数据库中，数据库的压力就会被大大减轻了；</p> <ul> <li> <p>当业务应用访问的是非核心数据（例如电商商品属性）时，暂时停止从缓存中查询这些数据，而是直接返回预定义信息、空值或是错误信息；</p> </li> <li> <p>当业务应用访问的是核心数据（例如电商商品库存）时，仍然允许查询缓存，如果缓存缺失，也可以继续通过数据库读取。</p> </li> </ul> <h4 id="2redis-实例发生宕机">2、Redis 实例发生宕机</h4> <p>Redis 实例的宕机，缓存层就不能处理数据，最总流量都会流入到数据库中</p> <p>如何解决呢？</p> <p>1、业务中实现服务熔断或者请求限流机制；</p> <ul> <li> <p>服务熔断：如果监听到发生了缓存雪崩，直接暂停对缓存服务的请求，但是这种对业务的影响比较大；</p> </li> <li> <p>服务限流：可以在入口做限流，不要让所有的请求都流入到后端的服务中；</p> </li> </ul> <p>2、提前预防，搭建 Redis 的高可用集群；</p> <ul> <li>尝试构建 Redis 的高可用集群，比如当某主节点挂掉了，集群能够马上重新选出新的主节点。例如<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/ricklz/p/15916014.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6"  target="_blank" rel="nofollow">哨兵机制</a></li> </ul> <h3 id="3缓存击穿">3、缓存击穿</h3> <p>其实跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是一个热点的Key，有大并发集中对其进行访问，突然间这个Key失效了，导致大并发全部打在数据库上，导致数据库压力剧增。这种现象就叫做缓存击穿。</p> <p>如何解决？</p> <p>对于热点 key 可以不设置过期时间，或者设置一个超过使用周期的过期时间，保证这个 key 在业务使用期间永远存在。</p> <h3 id="4缓存穿透">4、缓存穿透</h3> <p>如果业务请求的缓存，既不在缓存中，也不再数据库中，那么缓存将没有用，所有的请求都会流入到数据库中。</p> <p>那么，缓存穿透会发生在什么时候呢？一般来说，有两种情况。</p> <p>1、业务层误操作：缓存中的数据和数据库中的数据被误删除了，所以缓存和数据库中都没有数据；</p> <p>2、恶意攻击：专门访问数据库中没有的数据。</p> <p>如何解决？</p> <p>1、缓存空值或缺省值；</p> <p>一旦发生缓存穿透，在缓存中写入一个业务中允许的空值，这样缓存中有数据了，就避免了缓存穿透。</p> <p>2、使用布隆过滤器；</p> <p>使用布隆过滤器判断下数据是否存在，数据如果不存在，就不向数据库发起请求了。</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/43263751"  target="_blank" rel="nofollow">布隆过滤器</a></p> <p>3、在请求入口的前端进行请求检测；</p> <p>缓存穿透的一个原因是有大量的恶意请求访问不存在的数据，所以，一个有效的应对方案是在请求入口前端，对业务系统接收到的请求进行合法性检测，把恶意的请求（例如请求参数不合理、请求参数是非法值、请求字段不存在）直接过滤掉，不让它们访问后端缓存和数据库。这样一来，也就不会出现缓存穿透问题了。</p> <h3 id="缓存中的-hot-key-和-big-key">缓存中的 hot key 和 big key</h3> <p>这两种的处理方式可参见</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/ricklz/p/15916014.html#%E9%81%BF%E5%85%8D-hot-key"  target="_blank" rel="nofollow">Hot Key 和 big key</a></p> <h3 id="总结">总结</h3> <p>对于缓存的使用，我们经常用到的有两种1、只读缓存；2、读写缓存；</p> <p>只读缓存，对比读写缓存</p> <p>优点：缓存中一直会有数据，如果更新操作后会立即再次访问，可以直接命中缓存，能够降低读请求对于数据库的压力。</p> <p>缺点：如果更新后的数据，之后很少再被访问到，会导致缓存中保留的不是最热的数据，缓存利用率不高（只读缓存中保留的都是热数据）。</p> <p>所以读写缓存比较适合用于读写相当的业务场景。</p> <p>缓存在使用的过程中，会面临缓存中的数据和数据库中的不一致；缓存雪崩；缓存击穿和缓存穿透，这些我们需要弄明白这些情况发生的额场景，然后再业务中一一去避免。</p> <h3 id="参考">参考</h3> <p>【Redis核心技术与实战】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://time.geekbang.org/column/intro/100056701"  target="_blank" rel="nofollow">https://time.geekbang.org/column/intro/100056701</a><br /> 【Redis设计与实现】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://book.douban.com/subject/25900156/"  target="_blank" rel="nofollow">https://book.douban.com/subject/25900156/</a><br /> 【什么是缓存雪崩、缓存击穿、缓存穿透】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/346651831"  target="_blank" rel="nofollow">https://zhuanlan.zhihu.com/p/346651831</a><br /> 【详解布隆过滤器的原理，使用场景和注意事项】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/43263751"  target="_blank" rel="nofollow">https://zhuanlan.zhihu.com/p/43263751</a><br /> 【Redis 学习笔记】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/boilingfrog/Go-POINT/tree/master/redis"  target="_blank" rel="nofollow">https://github.com/boilingfrog/Go-POINT/tree/master/redis</a><br /> 【如何使用Redis缓存】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://boilingfrog.github.io/2022/04/20/Redis%E4%B8%AD%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/"  target="_blank" rel="nofollow">https://boilingfrog.github.io/2022/04/20/Redis中缓存如何使用/</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-39540.htm">Ubuntu 20.04 k8s docker下载镜像报错</a></p>
                                        <p>下一个：<a href="/news/article-40030.htm">JavaScript从数组中删除相同的条目，并保持其长度相同方法详解</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-29697.htm" title="宠物粮加工需要多少钱一吨呢 宠物粮加工需要多少钱一吨呢图片">宠物粮加工需要多少钱一吨呢 宠物粮加工需要多少钱一吨呢图片</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-1-free-v2ray-subscribe.htm" title="12月1日|最高速度19.1M/S，2024最新SSR/V2ray/Clash/Shadowrocket免费节点高速订阅链接，翻墙机场推荐">12月1日|最高速度19.1M/S，2024最新SSR/V2ray/Clash/Shadowrocket免费节点高速订阅链接，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-9-clash-node.htm" title="12月9日|最高速度20.4M/S，2024最新SSR/V2ray/Clash/Shadowrocket免费节点高速订阅链接，翻墙机场推荐">12月9日|最高速度20.4M/S，2024最新SSR/V2ray/Clash/Shadowrocket免费节点高速订阅链接，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-11-free-node-subscribe-links.htm" title="11月11日|最高速度18.6M/S，2024最新V2ray/SSR/Clash/Shadowrocket免费节点高速订阅链接，翻墙机场推荐">11月11日|最高速度18.6M/S，2024最新V2ray/SSR/Clash/Shadowrocket免费节点高速订阅链接，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-25718.htm" title="河北农大动物医院 河北农大动物医院怎么样">河北农大动物医院 河北农大动物医院怎么样</a></li>
                        <li class="py-2"><a href="/news/article-35926.htm" title="宠物粮食进货渠道分析图（宠物粮食进货渠道分析图片）">宠物粮食进货渠道分析图（宠物粮食进货渠道分析图片）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-23-clash-windows.htm" title="11月23日|最高速度18.2M/S，2024最新Clash/Shadowrocket/V2ray/SSR免费节点高速订阅链接，翻墙机场推荐">11月23日|最高速度18.2M/S，2024最新Clash/Shadowrocket/V2ray/SSR免费节点高速订阅链接，翻墙机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-35447.htm" title="动物诊疗许可证办理（动物诊疗许可证办理多少钱）">动物诊疗许可证办理（动物诊疗许可证办理多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-21097.htm" title="宠物粮市场前景预测分析论文（宠物粮市场调查）">宠物粮市场前景预测分析论文（宠物粮市场调查）</a></li>
                        <li class="py-2"><a href="/news/article-29696.htm" title="苏州宠物领养中心领养要钱吗（苏州宠物狗领养）">苏州宠物领养中心领养要钱吗（苏州宠物狗领养）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">45</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </section>
        <!-- ========================= footer start ========================= -->
    <footer class="footer pt-160">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>WindowsClash节点订阅站 版权所有</p>
                <p>Powered by WordPress</p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer end ========================= -->
    <!-- ========================= scroll-top ========================= -->
    <a href="#" class="scroll-top btn-hover">
        <i class="lni lni-chevron-up"></i>
    </a>
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/windowsclash/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/bootstrap-5.0.0-beta2.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/wow.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/polyfill.js"></script>
    <script src="/assets/website/js/frontend/windowsclash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>